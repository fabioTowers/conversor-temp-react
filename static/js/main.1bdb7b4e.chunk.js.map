{"version":3,"sources":["componentes/Conversor.jsx","index.js"],"names":["escalas","c","f","k","fahrenheitToCelsius","fahrenheit","celsiusToFahrenheit","celsius","kelvinToCelsius","kelvin","kelvinToFahrenheit","celsiusToKelvin","fahrenheitToKelvin","validarConversao","temperatura","funcaoDeConversao","entrada","parseFloat","Number","isNaN","saida","Math","round","toString","Entrada","props","handleChange","bind","e","this","onTemperatureChange","target","value","escala","onChange","React","Component","Conversor","handleCelsiusChange","handleFahrenheitChange","handleKelvinChange","state","setState","ReactDOM","render","document","getElementById"],"mappings":"wNAGMA,EAAU,CACZC,EAAG,UACHC,EAAG,aACHC,EAAG,UAIP,SAASC,EAAoBC,GACzB,OAA2B,GAAnBA,EAAa,IAAU,EAGnC,SAASC,EAAoBC,GACzB,OAAkB,EAAVA,EAAc,EAAK,GAG/B,SAASC,EAAgBC,GACrB,OAAOA,EAAS,IAGpB,SAASC,EAAmBD,GACxB,OAAUA,EAAS,KAAK,EAAK,EAAK,GAGtC,SAASE,EAAgBJ,GACrB,OAAOA,EAAU,IAGrB,SAASK,EAAmBP,GACxB,OAAUA,EAAa,IAAK,EAAI,EAAK,IAKzC,SAASQ,EAAiBC,EAAaC,GAErC,IAAMC,EAAUC,WAAWH,GAC3B,GAAII,OAAOC,MAAMH,GACf,MAAO,GAGT,IAAMI,EAAQL,EAAkBC,GAEhC,OADkBK,KAAKC,MAAc,IAARF,GAAgB,KAC5BG,W,IAIbC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBAFH,E,yDAUNC,GACXC,KAAKJ,MAAMK,oBAAoBF,EAAEG,OAAOC,S,+BAOxC,IAAMlB,EAAce,KAAKJ,MAAMX,YACzBmB,EAASJ,KAAKJ,MAAMQ,OAC1B,OACE,qCAGE,8DAAiCjC,EAAQiC,GAAzC,OACA,uBAAOD,MAAOlB,EACPoB,SAAUL,KAAKH,sB,GA3BRS,IAAMC,WAoFbC,E,kDAlDb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IACDa,oBAAsB,EAAKA,oBAAoBX,KAAzB,gBAC3B,EAAKY,uBAAyB,EAAKA,uBAAuBZ,KAA5B,gBAC9B,EAAKa,mBAAqB,EAAKA,mBAAmBb,KAAxB,gBAC1B,EAAKc,MAAQ,CAAC3B,YAAa,GAAImB,OAAQ,KALtB,E,gEAQCnB,GAClBe,KAAKa,SAAS,CAACT,OAAQ,IAAKnB,kB,6CAGPA,GACrBe,KAAKa,SAAS,CAACT,OAAQ,IAAKnB,kB,yCAGXA,GACjBe,KAAKa,SAAS,CAACT,OAAQ,IAAKnB,kB,+BAI5B,IAAMmB,EAASJ,KAAKY,MAAMR,OACpBnB,EAAce,KAAKY,MAAM3B,YAGzBP,EAAqB,MAAX0B,EAAiBpB,EAAiBC,EAAaV,GAAkC,MAAX6B,EAAiBpB,EAAiBC,EAAaN,GAAmBM,EAClJT,EAAwB,MAAX4B,EAAiBpB,EAAiBC,EAAaR,GAAkC,MAAX2B,EAAiBpB,EAAiBC,EAAaJ,GAAsBI,EACxJL,EAAoB,MAAXwB,EAAiBpB,EAAiBC,EAAaH,GAA8B,MAAXsB,EAAiBpB,EAAiBC,EAAaF,GAAsBE,EAItJ,OACE,gCACE,cAAC,EAAD,CACEmB,OAAO,IACPnB,YAAaP,EACbuB,oBAAqBD,KAAKS,sBAC5B,cAAC,EAAD,CACEL,OAAO,IACPnB,YAAaT,EACbyB,oBAAqBD,KAAKU,yBAC5B,cAAC,EAAD,CACEN,OAAO,IACPnB,YAAaL,EACbqB,oBAAqBD,KAAKW,4B,GA7CZL,IAAMC,WC3E9BO,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1bdb7b4e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n//Três escalas de temperatura\r\nconst escalas = {\r\n    c: 'Celsius',\r\n    f: 'Fahrenheit',\r\n    k: 'Kelvin'\r\n};\r\n\r\n//Funções de conversão\r\nfunction fahrenheitToCelsius(fahrenheit) {\r\n    return (fahrenheit - 32) * 5 / 9;\r\n}\r\n  \r\nfunction celsiusToFahrenheit(celsius) {\r\n    return (celsius * 9 / 5) + 32;\r\n}\r\n\r\nfunction kelvinToCelsius(kelvin) {\r\n    return kelvin - 273;\r\n}\r\n\r\nfunction kelvinToFahrenheit(kelvin) {\r\n    return (((kelvin - 273)/5) * 9) + 32;\r\n}\r\n\r\nfunction celsiusToKelvin(celsius) {\r\n    return celsius + 273;\r\n}\r\n\r\nfunction fahrenheitToKelvin(fahrenheit) {\r\n    return (((fahrenheit - 32) /9) *5) + 273;\r\n}\r\n\r\n//Essa função apenas valida se o que foi digitado na entrada não é um valor inválido\r\n//Recebe uma temperatura e uma funçao de conversão como argumentos\r\nfunction validarConversao(temperatura, funcaoDeConversao) {\r\n//Tenta converter e verifica se o resultado é um NaN\r\n  const entrada = parseFloat(temperatura);\r\n  if (Number.isNaN(entrada)) {\r\n    return '';\r\n  }\r\n//Realiza a conversão, arredonda o resultado e retorna a string correspondente\r\n  const saida = funcaoDeConversao(entrada);\r\n  const resultado = Math.round(saida * 1000) / 1000;\r\n  return resultado.toString();\r\n}\r\n\r\n\r\nclass Entrada extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n/*Essa função é executada quando o elemento input é modificado\r\nestá específicado em onChange.\r\nO que essa função faz é mudar o state para atualiza-lo de acordo\r\ncom a entrada (o que foi digitado) para depois atualizar a interface\r\n*/\r\n  handleChange(e) {\r\n    this.props.onTemperatureChange(e.target.value);\r\n  }\r\n\r\n/*O método render mostra o que deve ser renderizado*/\r\n  render() {\r\n    /*props.temperatura é o que foi passado a este componente (Entrada) pelo\r\n    componente pai (conversor) que o renderiza*/\r\n    const temperatura = this.props.temperatura;\r\n    const escala = this.props.escala;\r\n    return (\r\n      <fieldset>\r\n        {/*A escala em que a conversão será realizada é passada pelo componente pai\r\n        via props*/}\r\n        <legend>Digite a temperatura em {escalas[escala]}:</legend>\r\n        <input value={temperatura}\r\n               onChange={this.handleChange} />\r\n      </fieldset>\r\n    );\r\n  }\r\n}\r\n  \r\nclass Conversor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\r\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\r\n    this.handleKelvinChange = this.handleKelvinChange.bind(this);\r\n    this.state = {temperatura: '', escala: 'c'};\r\n  }\r\n\r\n  handleCelsiusChange(temperatura) {\r\n    this.setState({escala: 'c', temperatura});\r\n  }\r\n\r\n  handleFahrenheitChange(temperatura) {\r\n    this.setState({escala: 'f', temperatura});\r\n  }\r\n\r\n  handleKelvinChange(temperatura) {\r\n    this.setState({escala: 'k', temperatura});\r\n  }\r\n\r\n  render() {\r\n    const escala = this.state.escala;\r\n    const temperatura = this.state.temperatura;\r\n    /*Operador ternário condicional múltiplo: verifica se a escala é Fahrenheit\r\n    se não for verifica se é kelvin, se não for retorna a temperatura em celsius.*/\r\n    const celsius = escala === 'f' ? validarConversao(temperatura, fahrenheitToCelsius) : escala === 'k' ? validarConversao(temperatura, kelvinToCelsius) : temperatura;\r\n    const fahrenheit = escala === 'c' ? validarConversao(temperatura, celsiusToFahrenheit) : escala === 'k' ? validarConversao(temperatura, kelvinToFahrenheit) : temperatura;\r\n    const kelvin = escala === 'c' ? validarConversao(temperatura, celsiusToKelvin) : escala === 'f' ? validarConversao(temperatura, fahrenheitToKelvin) : temperatura;\r\n\r\n/*O que deve ser renderizado: três componentes Entrada, cada um é renderizado \r\ncom as props passadas */\r\n    return (\r\n      <div>\r\n        <Entrada\r\n          escala=\"c\"\r\n          temperatura={celsius}\r\n          onTemperatureChange={this.handleCelsiusChange} />\r\n        <Entrada\r\n          escala=\"f\"\r\n          temperatura={fahrenheit}\r\n          onTemperatureChange={this.handleFahrenheitChange} />\r\n        <Entrada\r\n          escala=\"k\"\r\n          temperatura={kelvin}\r\n          onTemperatureChange={this.handleKelvinChange} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n  \r\nexport default Conversor\r\n  ","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\n//importando o componente react\r\nimport Conversor from './componentes/Conversor'\r\n\r\n/*Renderizando dentro da div em index.html com id=root o elemento Conversor */\r\nReactDOM.render(\r\n    <Conversor></Conversor>,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}