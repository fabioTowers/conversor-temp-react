{"version":3,"sources":["componentes/Conversor.jsx","index.js"],"names":["escalas","c","f","toCelsius","fahrenheit","toFahrenheit","celsius","validarConversao","temperatura","funcaoDeConversao","entrada","parseFloat","Number","isNaN","saida","Math","round","toString","Entrada","props","handleChange","bind","e","this","onTemperatureChange","target","value","escala","onChange","React","Component","Conversor","handleCelsiusChange","handleFahrenheitChange","state","setState","ReactDOM","render","document","getElementById"],"mappings":"wNAGMA,EAAU,CACZC,EAAG,UACHC,EAAG,cAGP,SAASC,EAAUC,GACf,OAA2B,GAAnBA,EAAa,IAAU,EAGnC,SAASC,EAAaC,GAClB,OAAkB,EAAVA,EAAc,EAAK,GAK/B,SAASC,EAAiBC,EAAaC,GAErC,IAAMC,EAAUC,WAAWH,GAC3B,GAAII,OAAOC,MAAMH,GACf,MAAO,GAGT,IAAMI,EAAQL,EAAkBC,GAEhC,OADkBK,KAAKC,MAAc,IAARF,GAAgB,KAC5BG,W,IAIbC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBAFH,E,yDAUNC,GACXC,KAAKJ,MAAMK,oBAAoBF,EAAEG,OAAOC,S,+BAOxC,IAAMlB,EAAce,KAAKJ,MAAMX,YACzBmB,EAASJ,KAAKJ,MAAMQ,OAC1B,OACE,qCAGE,8DAAiC3B,EAAQ2B,GAAzC,OACA,uBAAOD,MAAOlB,EACPoB,SAAUL,KAAKH,sB,GA3BRS,IAAMC,WAyEbC,E,kDAvCb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IACDa,oBAAsB,EAAKA,oBAAoBX,KAAzB,gBAC3B,EAAKY,uBAAyB,EAAKA,uBAAuBZ,KAA5B,gBAC9B,EAAKa,MAAQ,CAAC1B,YAAa,GAAImB,OAAQ,KAJtB,E,gEAOCnB,GAClBe,KAAKY,SAAS,CAACR,OAAQ,IAAKnB,kB,6CAGPA,GACrBe,KAAKY,SAAS,CAACR,OAAQ,IAAKnB,kB,+BAI5B,IAAMmB,EAASJ,KAAKW,MAAMP,OACpBnB,EAAce,KAAKW,MAAM1B,YAEzBF,EAAqB,MAAXqB,EAAiBpB,EAAiBC,EAAaL,GAAaK,EACtEJ,EAAwB,MAAXuB,EAAiBpB,EAAiBC,EAAaH,GAAgBG,EAIlF,OACE,gCACE,cAAC,EAAD,CACEmB,OAAO,IACPnB,YAAaF,EACbkB,oBAAqBD,KAAKS,sBAC5B,cAAC,EAAD,CACEL,OAAO,IACPnB,YAAaJ,EACboB,oBAAqBD,KAAKU,gC,GAlCZJ,IAAMC,WCzD9BM,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4d6fa44a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n//Duas escalas de temperatura\r\nconst escalas = {\r\n    c: 'Celsius',\r\n    f: 'Fahrenheit'\r\n};\r\n\r\nfunction toCelsius(fahrenheit) {\r\n    return (fahrenheit - 32) * 5 / 9;\r\n}\r\n  \r\nfunction toFahrenheit(celsius) {\r\n    return (celsius * 9 / 5) + 32;\r\n}\r\n\r\n//Essa função apenas valida se o que foi digitado na entrada não é um valor inválido\r\n//Recebe uma temperatura e uma funçao de conversão como argumentos\r\nfunction validarConversao(temperatura, funcaoDeConversao) {\r\n//Tenta converter e verifica se o resultado é um NaN\r\n  const entrada = parseFloat(temperatura);\r\n  if (Number.isNaN(entrada)) {\r\n    return '';\r\n  }\r\n//Realiza a conversão, arredonda o resultado e retorna a string correspondente\r\n  const saida = funcaoDeConversao(entrada);\r\n  const resultado = Math.round(saida * 1000) / 1000;\r\n  return resultado.toString();\r\n}\r\n\r\n\r\nclass Entrada extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n/*Essa função é executada quando o elemento input é modificado\r\nestá específicado em onChange.\r\nO que essa função faz é mudar o state para atualiza-lo de acordo\r\ncom a entrada (o que foi digitado) para depois atualizar a interface\r\n*/\r\n  handleChange(e) {\r\n    this.props.onTemperatureChange(e.target.value);\r\n  }\r\n\r\n/*O método render mostra o que deve ser renderizado*/\r\n  render() {\r\n    /*props.temperatura é o que foi passado a este componente (Entrada) pelo\r\n    componente pai (conversor) que o renderiza*/\r\n    const temperatura = this.props.temperatura;\r\n    const escala = this.props.escala;\r\n    return (\r\n      <fieldset>\r\n        {/*A escala em que a conversão será realizada é passada pelo componente pai\r\n        via props*/}\r\n        <legend>Digite a temperatura em {escalas[escala]}:</legend>\r\n        <input value={temperatura}\r\n               onChange={this.handleChange} />\r\n      </fieldset>\r\n    );\r\n  }\r\n}\r\n  \r\nclass Conversor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\r\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\r\n    this.state = {temperatura: '', escala: 'c'};\r\n  }\r\n\r\n  handleCelsiusChange(temperatura) {\r\n    this.setState({escala: 'c', temperatura});\r\n  }\r\n\r\n  handleFahrenheitChange(temperatura) {\r\n    this.setState({escala: 'f', temperatura});\r\n  }\r\n\r\n  render() {\r\n    const escala = this.state.escala;\r\n    const temperatura = this.state.temperatura;\r\n    /*Operador ternário: verifica se a escala é Celsius ou Fahrenheit para fazer a conversão adequada */\r\n    const celsius = escala === 'f' ? validarConversao(temperatura, toCelsius) : temperatura;\r\n    const fahrenheit = escala === 'c' ? validarConversao(temperatura, toFahrenheit) : temperatura;\r\n\r\n/*O que deve ser renderizado: dois componentes Entrada, cada um é renderizado \r\ncom as props passadas */\r\n    return (\r\n      <div>\r\n        <Entrada\r\n          escala=\"c\"\r\n          temperatura={celsius}\r\n          onTemperatureChange={this.handleCelsiusChange} />\r\n        <Entrada\r\n          escala=\"f\"\r\n          temperatura={fahrenheit}\r\n          onTemperatureChange={this.handleFahrenheitChange} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n  \r\nexport default Conversor\r\n  ","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\n//importando o componente react\r\nimport Conversor from './componentes/Conversor'\r\n\r\n/*Renderizando dentro da div em index.html com id=root o elemento Conversor */\r\nReactDOM.render(\r\n    <Conversor></Conversor>,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}